;
; Copyright (c) 2023 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program quadrature_encoder

; the code must be loaded at address 0, because it uses computed jumps
.origin 0


; the code works by running a loop that continuously shifts the 2 phase pins into
; isr and looks at the lower 4 bits to do a computed jump to an instruction that
; does the proper "do nothing" | "increment" | "decrement" action for that pin
; state change (or no change)

; isr holds the last state of the 2 pins during most of the code. The y register
; keeps the current encoder count and is incremented / decremented according to
; the steps sampled

; the program keeps trying to write the current count to the RX FIFO without
; blocking. To read the current count, the user code must drain the FIFO first
; and wait for a fresh sample (takes ~4 SM cycles on average). The worst case
; sampling loop takes 10 cycles, so this program is able to read step rates up
; to sysclk / 10  (e.g., sysclk 125MHz, max step rate = 12.5 Msteps/sec)

; 00 state
    jmp update    ; read 00
    jmp decrement ; read 01
    jmp increment ; read 10
    jmp update    ; read 11

; 01 state
    jmp increment ; read 00
    jmp update    ; read 01
    jmp update    ; read 10
    jmp decrement ; read 11

; 10 state
    jmp decrement ; read 00
    jmp update    ; read 01
    jmp update    ; read 10
    jmp increment ; read 11

; to reduce code size, the last 2 states are implemented in place and become the
; target for the other jumps

; 11 state
    jmp update    ; read 00
    jmp increment ; read 01
decrement:
    ; note: the target of this instruction must be the next address, so that
    ; the effect of the instruction does not depend on the value of y. The
    ; same is true for the "jmp X--" below. Basically "jmp y--, <next addr>"
    ; is just a pure "decrement y" instruction, with no other side effects
    jmp y--, update ; read 10

    ; this is where the main loop starts
.wrap_target
update:
    mov isr, y      ; read 11
    push noblock

sample_pins:
    ; we shift into isr the last state of the 2 input pins (now in osr) and
    ; the new state of the 2 pins, thus producing the 4 bit target for the
    ; computed jump into the correct action for this state. Both the push
    ; above and the out below zero out the other bits in isr
    out isr, 2
    in pins, 2

    ; save the state in the osr, so that we can use isr for other purposes
    mov osr, isr
    ; jump to the correct state machine action
    mov pc, isr

    ; the PIO does not have a increment instruction, so to do that we do a
    ; negate, decrement, negate sequence
increment:
    mov y, ~y
    jmp y--, increment_cont
increment_cont:
    mov y, ~y
.wrap    ; the .wrap here avoids one jump instruction and saves a cycle too
